import { NextResponse } from "next/server";
import connectDB from "../../db";
import UserData from "../../../models/UserData";
import { Types } from "mongoose";

export async function GET(request, { params }) {
    await connectDB();

    try {
        const { userId } = params;
        console.log("üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π userId:", userId);

        if (!userId) {
            return NextResponse.json({ error: "userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" }, { status: 400 });
        }

        try {
            const userData = await UserData.findOne({ 
                userId: Types.ObjectId.createFromHexString(userId)
            });
            console.log("üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", userData);

            if (!userData) {
                return NextResponse.json({ error: "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" }, { status: 404 });
            }

            return NextResponse.json({
                bonuses: userData.bonuses,
                level: userData.level,
                nextLevel: userData.nextLevel,
                progress: userData.progress
            }, { status: 200 });

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ userId:", error);
            return NextResponse.json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç userId" }, { status: 400 });
        }

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
        return NextResponse.json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 });
    }
} 