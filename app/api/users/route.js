//app/api/users/route.js
import { NextResponse } from "next/server";
import connectDB from "../db";
import User from "../../models/User";
import UserData from "../../models/UserData";
import bcrypt from "bcryptjs";

export async function POST(request) {
    await connectDB(); // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB

    try {
        const contentType = request.headers.get("content-type");

        let body;
        if (contentType.includes("application/json")) {
            body = await request.json(); // –ï—Å–ª–∏ JSON
        } else if (contentType.includes("multipart/form-data")) {
            const formData = await request.formData();
            body = Object.fromEntries(formData); // –ï—Å–ª–∏ form-data
        } else {
            return NextResponse.json({ error: "Unsupported Content-Type" }, { status: 400 });
        }

        const { name, email, password, birthDate } = body;

        if (!name || !email || !password || !birthDate) {
            return NextResponse.json({ error: "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" }, { status: 400 });
        }

        const parsedBirthDate = new Date(birthDate);
        if (isNaN(parsedBirthDate)) {
            return NextResponse.json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞" }, { status: 400 });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return NextResponse.json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" }, { status: 409 });
        }

        // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        const hashedPassword = await bcrypt.hash(password, 10);

        // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newUser = new User({
            name,
            email,
            password: hashedPassword, // –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å —Ç–µ–ø–µ—Ä—å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω
            birthDate: parsedBirthDate
        });

        const newUserData = new UserData({
            userId: newUser._id,
            bonuses: 50,
            level: "–ù–æ–≤–∏—á–æ–∫",
            nextLevel: 1000,
            progress: 10
        });

        await newUser.save();
        await newUserData.save();

        return NextResponse.json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω", userId: newUser._id }, { status: 201 });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞:", error);
        return NextResponse.json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 });
    }
}


// export async function GET(request) {
//     await connectDB();

//     try {
//         const { searchParams } = new URL(request.url);
//         const userId = searchParams.get('userId');
//         console.log("üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π userId:", userId);

//         if (!userId) {
//             return NextResponse.json({ error: "userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" }, { status: 400 });
//         }

//         try {
//             const userData = await UserData.findOne({ 
//                 userId: new mongoose.Types.ObjectId(userId) 
//             });
//             console.log("üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", userData);

//             if (!userData) {
//                 return NextResponse.json({ error: "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" }, { status: 404 });
//             }

//             return NextResponse.json({
//                 bonuses: userData.bonuses,
//                 level: userData.level,
//                 nextLevel: userData.nextLevel,
//                 progress: userData.progress
//             }, { status: 200 });

//         } catch (error) {
//             console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ userId:", error);
//             return NextResponse.json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç userId" }, { status: 400 });
//         }

//     } catch (error) {
//         console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
//         return NextResponse.json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 });
//     }
// }